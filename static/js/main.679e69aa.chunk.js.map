{"version":3,"sources":["components/Form.js","components/Recipes.js","components/Validator.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","type","name","Recipes","className","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","href","source_url","EmptyResponse","style","color","FishResponse","NotFishResponse","text","concat","query","toUpperCase","Validator","toLowerCase","API_KEY","App","state","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","_this","setState","fetch","sent","json","console","log","stop","components_Form","this","components_Recipes","components_Validator","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PASeA,SAPF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,WAClBJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,KAAK,eACxBN,EAAAC,EAAAC,cAAA,2BCYOK,EAfC,SAAAR,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aACXR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACVT,EAAMU,QAAQC,IAAI,SAACC,GAChB,OACIX,EAAAC,EAAAC,cAAA,OAAKU,IAAKD,EAAOE,UAAWL,UAAU,YAClCR,EAAAC,EAAAC,cAAA,OAAKY,IAAKH,EAAOI,UAAWC,IAAKL,EAAOM,QACxCjB,EAAAC,EAAAC,cAAA,KAAGgB,KAAMP,EAAOQ,YAAaR,EAAOM,aCP5D,SAASG,EAAcrB,GAEnB,OAAOC,EAAAC,EAAAC,cAAA,KAAGM,UAAU,UAAUa,MAAO,CAACC,MAAO,QAAtC,IADM,yBACN,KAGX,SAASC,EAAaxB,GAClB,OAAOC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UAAUa,MAAO,CAACC,MAAO,UAAxC,cAGX,SAASE,EAAgBzB,GACrB,IAAM0B,EAAI,sBAAAC,OAAyB3B,EAAM4B,MAAMC,eAC/C,OACI5B,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WAAWiB,GAsBnBI,MAbf,SAAmB9B,GACf,MAAkC,SAA9BA,EAAM4B,MAAMG,cACH9B,EAAAC,EAAAC,cAAEqB,EAAF,MAEY,KAAhBxB,EAAM4B,MACF3B,EAAAC,EAAAC,cAAEkB,EAAF,MAGApB,EAAAC,EAAAC,cAAEsB,EAAF,CAAkBG,MAAS5B,EAAM4B,SCxB5CI,EAAU,mCA8CDC,6MA3CbC,MAAQ,CACNN,MAAO,GACPlB,QAAS,MAGXL,gDAAY,SAAA8B,EAAOC,GAAP,IAAAC,EAAAT,EAAAU,EAAAC,EAAA,OAAAC,EAAAtC,EAAAuC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACJP,EAAaD,EAAES,OAAOC,SAAST,WAAWU,MAChDX,EAAEY,iBAEFC,EAAKC,SAAS,CAAEtB,MAAOS,IAES,SAA7BA,EAAWN,cANJ,CAAAW,EAAAE,KAAA,gBAQAhB,EARA,4CAAAD,OAQoDK,EARpD,OAAAL,OAQiEU,EARjE,aAAAK,EAAAE,KAAA,EASiBO,MAAMvB,GATvB,cASAU,EATAI,EAAAU,KAAAV,EAAAE,KAAA,GAWaN,EAASe,OAXtB,QAWAd,EAXAG,EAAAU,KAaNH,EAAKC,SAAS,CAAExC,QAAS6B,EAAK7B,UAC9B4C,QAAQC,IAAIN,EAAKf,MAAMxB,SAdjBgC,EAAAE,KAAA,iBAiBNU,QAAQC,IAAI,eACZN,EAAKC,SAAS,CAAExC,QAAS,KAlBnB,yBAAAgC,EAAAc,SAAArB,oIAwBV,OACElC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,aAAd,kBAEFR,EAAAC,EAAAC,cAACsD,EAAD,CAAMpD,UAAWqD,KAAKrD,YACtBJ,EAAAC,EAAAC,cAACwD,EAAD,CAASjD,QAASgD,KAAKxB,MAAMxB,UAC7BT,EAAAC,EAAAC,cAACyD,EAAD,CAAWhC,MAAO8B,KAAKxB,MAAMN,gBArCnBiC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.679e69aa.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = props => (\n    <form onSubmit={props.getRecipe}>\n        <input type=\"text\" name=\"recipeName\"/>\n        <button >Search</button>\n    </form>\n);\n\nexport default Form;\n","import React from 'react';\n\nconst Recipes = props => (\n    <div className=\"container\">\n        <div className=\"row\">\n            {props.recipes.map((recipe) => {\n                return (\n                    <div key={recipe.recipe_id} className=\"col-md-4\">\n                        <img src={recipe.image_url} alt={recipe.title}/>\n                        <a href={recipe.source_url}>{recipe.title}</a>\n                    </div>\n                )\n            })}\n        </div>\n    </div>\n);\n\nexport default Recipes;\n","import React from 'react';\n\nfunction EmptyResponse(props) {\n    const text = \"FEED ME \\n RIGHT MEOW!\"\n    return <p className=\"frankie\" style={{color: \"red\" }}> {text} </p>\n}\n\nfunction FishResponse(props) {\n    return <div className=\"frankie\" style={{color: \"green\" }}> Yummmmm! </div>\n}\n\nfunction NotFishResponse(props) {\n    const text = `I WANT FISH \\n NOT ${props.query.toUpperCase()}`\n    return (\n        <div className=\"frankie\">{text}</div>\n        // <div>\n            // <img className=\"img__query\"\n            //     src={`http://loremflickr.com/600/400/${props.query.toLowerCase()}`}\n            //     alt={`${props.query.toLowerCase()}`}/>\n        // </div>\n    )\n}\n\nfunction Validator(props) {\n    if (props.query.toLowerCase() === \"fish\") {\n        return ( < FishResponse / > )\n    }\n    else if (props.query === \"\") {\n        return ( < EmptyResponse / > )\n    }\n    else {\n        return ( < NotFishResponse query = {props.query}/ > )\n    }\n}\n\n\nexport default Validator;\n","import React, {Component} from 'react';\nimport './App.css'\n\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\"\nimport Validator from \"./components/Validator\"\n\nconst API_KEY = \"b2b519fa5cf544c8da39416925534c84\";\n\nclass App extends Component {\n  state = {\n    query: \"\",\n    recipes: []\n  }\n\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n\n    this.setState({ query: recipeName});\n\n    if(recipeName.toLowerCase() === \"fish\"){\n\n        const query = `https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=10`\n        const api_call = await fetch(query);\n\n        const data = await api_call.json();\n\n        this.setState({ recipes: data.recipes});\n        console.log(this.state.recipes)\n\n    } else {\n        console.log('FISH PLEASE')\n        this.setState({ recipes: []});\n    }\n\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe}/>\n        <Recipes recipes={this.state.recipes}/>\n        <Validator query={this.state.query}></Validator>\n      </div>\n\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}